{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\103so\\\\Desktop\\\\ARTEBO\\\\frontend\\\\src\\\\components\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasWrapper = styled.div`\n  width: 80%;\n  border: 1px solid #000;\n  margin: 20px;\n  overflow: hidden;\n  display: inline-block;\n  border-radius: 20px;\n`;\n_c = CanvasWrapper;\nconst DrawingCanvas = props => {\n  _s();\n  //캔버스\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [painting, setPainting] = useState(false);\n  let [strokeColor, setStrokeColor] = useState(\"\");\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 1500;\n    canvas.height = 600;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineJoin = \"round\";\n    ctx.lineWidth = 50;\n    ctx.strokeStyle = props.strokeColor;\n    console.log('지금 색' + props.strokeColor);\n    setIsDrawing(ctx);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = props.strokeColor;\n    if (props.strokeColor == \"white\") {\n      ctx.lineWidth = 70;\n    } else if (props.strokeColor == \"erase\") {\n      ctx.clearRect(0, 0, 1500, 600);\n    } else {\n      ctx.lineWidth = 50;\n    }\n    console.log('지금 색' + props.strokeColor);\n  }, [props.strokeColor]);\n  const drawfn = e => {\n    const mouseX = e.nativeEvent.offsetX;\n    const mouseY = e.nativeEvent.offsetY;\n    if (!painting) {\n      isDrawing.beginPath();\n      isDrawing.moveTo(mouseX, mouseY);\n    } else {\n      isDrawing.lineTo(mouseX, mouseY);\n      isDrawing.stroke();\n    }\n  };\n  const saveDrawing = async () => {\n    const canvas = canvasRef.current;\n    const dataURL = canvas.toDataURL(); // 캔버스를 이미지로 변환\n\n    try {\n      const response = await fetch('/api/post/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          drawingData: dataURL\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save drawing');\n      }\n      console.log('Drawing saved successfully');\n    } catch (error) {\n      console.error('Error saving drawing:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CanvasWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: () => setPainting(true),\n      onMouseUp: () => setPainting(false),\n      onMouseMove: e => drawfn(e),\n      onMouseLeave: () => setPainting(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveDrawing,\n      children: \"Save Drawing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"tg8eMDUDrLVoXqRVnWKr3RyaGTU=\");\n_c2 = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"CanvasWrapper\");\n$RefreshReg$(_c2, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","jsxDEV","_jsxDEV","CanvasWrapper","div","_c","DrawingCanvas","props","_s","canvasRef","isDrawing","setIsDrawing","painting","setPainting","strokeColor","setStrokeColor","canvas","current","width","height","ctx","getContext","lineJoin","lineWidth","strokeStyle","console","log","clearRect","drawfn","e","mouseX","nativeEvent","offsetX","mouseY","offsetY","beginPath","moveTo","lineTo","stroke","saveDrawing","dataURL","toDataURL","response","fetch","method","headers","body","JSON","stringify","drawingData","ok","Error","error","children","ref","onMouseDown","onMouseUp","onMouseMove","onMouseLeave","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/103so/Desktop/ARTEBO/frontend/src/components/Canvas.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CanvasWrapper = styled.div`\r\n  width: 80%;\r\n  border: 1px solid #000;\r\n  margin: 20px;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n  border-radius: 20px;\r\n`;\r\n\r\nconst DrawingCanvas = (props) => { //캔버스\r\n  const canvasRef = useRef(null);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [painting, setPainting]=useState(false);\r\n  let [strokeColor, setStrokeColor] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n      const canvas = canvasRef.current;\r\n\r\n      canvas.width=1500;\r\n      canvas.height=600;\r\n      const ctx= canvas.getContext(\"2d\");\r\n\r\n      ctx.lineJoin = \"round\";\r\n      ctx.lineWidth=50;\r\n      ctx.strokeStyle=props.strokeColor;\r\n      console.log('지금 색' + props.strokeColor);\r\n      \r\n      setIsDrawing(ctx);\r\n  },[])\r\n  useEffect(()=>{\r\n    const canvas = canvasRef.current; \r\n\r\n    const ctx= canvas.getContext(\"2d\");\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle=props.strokeColor;\r\n    if(props.strokeColor == \"white\"){\r\n      \r\n      ctx.lineWidth = 70;\r\n    }\r\n    else if(props.strokeColor == \"erase\"){\r\n      ctx.clearRect(0,0,1500,600);\r\n    }\r\n    else{\r\n      ctx.lineWidth=50;\r\n    }\r\n        \r\n    console.log('지금 색' + props.strokeColor); \r\n    \r\n\r\n  },[props.strokeColor])\r\n  \r\n  const drawfn = e => {\r\n    const mouseX = e.nativeEvent.offsetX;\r\n    const mouseY = e.nativeEvent.offsetY;\r\n    if(!painting){\r\n      isDrawing.beginPath();\r\n      isDrawing.moveTo(mouseX,mouseY);\r\n    }\r\n    else{\r\n      isDrawing.lineTo(mouseX,mouseY);\r\n      isDrawing.stroke();\r\n    }\r\n  }\r\n\r\n  const saveDrawing = async () => {\r\n    const canvas = canvasRef.current;\r\n    const dataURL = canvas.toDataURL(); // 캔버스를 이미지로 변환\r\n\r\n    try {\r\n      const response = await fetch('/api/post/create', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ drawingData: dataURL }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to save drawing');\r\n      }\r\n\r\n      console.log('Drawing saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving drawing:', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CanvasWrapper>\r\n    <canvas \r\n      ref={canvasRef}\r\n      onMouseDown={()=>setPainting(true)}\r\n      onMouseUp={()=>setPainting(false)}\r\n      onMouseMove={e=>drawfn(e)}\r\n      onMouseLeave={()=>setPainting(false)}\r\n      >\r\n    </canvas>\r\n    <button onClick={saveDrawing}>Save Drawing</button>\r\n    </CanvasWrapper>\r\n  );\r\n};\r\n\r\nexport default DrawingCanvas;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}